// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	cagipv1 "github.com/ca-gip/kotary/pkg/apis/ca-gip/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeResourceQuotaClaims implements ResourceQuotaClaimInterface
type FakeResourceQuotaClaims struct {
	Fake *FakeCagipV1
	ns   string
}

var resourcequotaclaimsResource = schema.GroupVersionResource{Group: "ca-gip.github.com", Version: "v1", Resource: "resourcequotaclaims"}

var resourcequotaclaimsKind = schema.GroupVersionKind{Group: "ca-gip.github.com", Version: "v1", Kind: "ResourceQuotaClaim"}

// Get takes name of the resourceQuotaClaim, and returns the corresponding resourceQuotaClaim object, and an error if there is any.
func (c *FakeResourceQuotaClaims) Get(name string, options v1.GetOptions) (result *cagipv1.ResourceQuotaClaim, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(resourcequotaclaimsResource, c.ns, name), &cagipv1.ResourceQuotaClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ResourceQuotaClaim), err
}

// List takes label and field selectors, and returns the list of ResourceQuotaClaims that match those selectors.
func (c *FakeResourceQuotaClaims) List(opts v1.ListOptions) (result *cagipv1.ResourceQuotaClaimList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(resourcequotaclaimsResource, resourcequotaclaimsKind, c.ns, opts), &cagipv1.ResourceQuotaClaimList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &cagipv1.ResourceQuotaClaimList{ListMeta: obj.(*cagipv1.ResourceQuotaClaimList).ListMeta}
	for _, item := range obj.(*cagipv1.ResourceQuotaClaimList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested resourceQuotaClaims.
func (c *FakeResourceQuotaClaims) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(resourcequotaclaimsResource, c.ns, opts))

}

// Create takes the representation of a resourceQuotaClaim and creates it.  Returns the server's representation of the resourceQuotaClaim, and an error, if there is any.
func (c *FakeResourceQuotaClaims) Create(resourceQuotaClaim *cagipv1.ResourceQuotaClaim) (result *cagipv1.ResourceQuotaClaim, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(resourcequotaclaimsResource, c.ns, resourceQuotaClaim), &cagipv1.ResourceQuotaClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ResourceQuotaClaim), err
}

// Update takes the representation of a resourceQuotaClaim and updates it. Returns the server's representation of the resourceQuotaClaim, and an error, if there is any.
func (c *FakeResourceQuotaClaims) Update(resourceQuotaClaim *cagipv1.ResourceQuotaClaim) (result *cagipv1.ResourceQuotaClaim, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(resourcequotaclaimsResource, c.ns, resourceQuotaClaim), &cagipv1.ResourceQuotaClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ResourceQuotaClaim), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeResourceQuotaClaims) UpdateStatus(resourceQuotaClaim *cagipv1.ResourceQuotaClaim) (*cagipv1.ResourceQuotaClaim, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(resourcequotaclaimsResource, "status", c.ns, resourceQuotaClaim), &cagipv1.ResourceQuotaClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ResourceQuotaClaim), err
}

// Delete takes name of the resourceQuotaClaim and deletes it. Returns an error if one occurs.
func (c *FakeResourceQuotaClaims) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(resourcequotaclaimsResource, c.ns, name), &cagipv1.ResourceQuotaClaim{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeResourceQuotaClaims) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(resourcequotaclaimsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &cagipv1.ResourceQuotaClaimList{})
	return err
}

// Patch applies the patch and returns the patched resourceQuotaClaim.
func (c *FakeResourceQuotaClaims) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *cagipv1.ResourceQuotaClaim, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(resourcequotaclaimsResource, c.ns, name, pt, data, subresources...), &cagipv1.ResourceQuotaClaim{})

	if obj == nil {
		return nil, err
	}
	return obj.(*cagipv1.ResourceQuotaClaim), err
}
